name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # SAST - Static Application Security Testing
  sast-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  # Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install safety
      run: pip install safety

    - name: Scan Python dependencies
      run: |
        # Scan auth service dependencies
        if [ -f "src/backend/services/auth/requirements.txt" ]; then
          echo "Scanning auth service dependencies..."
          safety check -r src/backend/services/auth/requirements.txt --json --output auth-safety-report.json || true
        fi
        
        # Scan gateway dependencies
        if [ -f "src/backend/gateway/requirements.txt" ]; then
          echo "Scanning gateway dependencies..."
          safety check -r src/backend/gateway/requirements.txt --json --output gateway-safety-report.json || true
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Audit Node.js dependencies
      run: |
        if [ -d "src/frontend" ] && [ -f "src/frontend/package.json" ]; then
          cd src/frontend
          npm audit --audit-level moderate --json > ../npm-audit-report.json || true
        fi

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-results
        path: |
          *-safety-report.json
          npm-audit-report.json

  # Secret Scanning
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # License Compliance
  license-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-licenses
      run: pip install pip-licenses

    - name: Scan Python licenses
      run: |
        # Install dependencies first
        if [ -f "src/backend/services/auth/requirements.txt" ]; then
          pip install -r src/backend/services/auth/requirements.txt
        fi
        
        if [ -f "src/backend/gateway/requirements.txt" ]; then
          pip install -r src/backend/gateway/requirements.txt
        fi
        
        # Generate license report
        pip-licenses --format json --output-file python-licenses.json
        pip-licenses --format markdown --output-file python-licenses.md

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Scan Node.js licenses
      run: |
        if [ -d "src/frontend" ] && [ -f "src/frontend/package.json" ]; then
          cd src/frontend
          npm install
          license-checker --json --out ../node-licenses.json
          license-checker --markdown --out ../node-licenses.md
        fi

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          python-licenses.*
          node-licenses.*

  # Container Security Scanning
  container-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Gateway image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/backend/docker/Dockerfile.gateway
        tags: electrical-orchestrator-gateway:scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Auth image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/backend/docker/Dockerfile.auth
        tags: electrical-orchestrator-auth:scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on Gateway
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'electrical-orchestrator-gateway:scan'
        format: 'sarif'
        output: 'gateway-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner on Auth
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'electrical-orchestrator-auth:scan'
        format: 'sarif'
        output: 'auth-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'gateway-trivy-results.sarif'

    - name: Upload Auth Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'auth-trivy-results.sarif'

  # Infrastructure Security
  infrastructure-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Checkov IaC security scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: dockerfile,kubernetes,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # Security Report Summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, secret-scan, container-security]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job results
        if [ "${{ needs.sast-scan.result }}" == "success" ]; then
          echo "✅ SAST Scan: Passed" >> security-summary.md
        else
          echo "❌ SAST Scan: Failed" >> security-summary.md
        fi
        
        if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
          echo "✅ Dependency Scan: Passed" >> security-summary.md
        else
          echo "❌ Dependency Scan: Failed" >> security-summary.md
        fi
        
        if [ "${{ needs.secret-scan.result }}" == "success" ]; then
          echo "✅ Secret Scan: Passed" >> security-summary.md
        else
          echo "❌ Secret Scan: Failed" >> security-summary.md
        fi
        
        if [ "${{ needs.container-security.result }}" == "success" ]; then
          echo "✅ Container Security: Passed" >> security-summary.md
        else
          echo "❌ Container Security: Failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "For detailed results, check the Security tab in GitHub." >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md